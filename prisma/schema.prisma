// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
  TASK
  CODE
  DRAWING
  pomofocus
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["mongodb"]
  // output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @unique
  name     String?
  imageUrl String?
  email    String  @unique

  servers  Server[]
  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

// where people will connect.
model Server {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  imageUrl   String?
  inviteCode String? @unique

  profileId String    @db.ObjectId
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  members   Member[]
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@index([profileId])
}

model Member {
  id   String     @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  // Creating a relation with profile/
  profileId String  @db.ObjectId
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId               String          @db.ObjectId
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @default(now())
  messages               Message[]
  directMessages         DirectMessage[]
  conversationsInitiated Conversation[]  @relation("MemberOne")
  conversationsReceived  Conversation[]  @relation("MemberTwo")

  @@index([profileId])
  @@index([serverId])
}

// enum ChannelType {
//   TEXT 
//   AUDIO
//   VIDEO 
// }
model Channel {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ChannelType @default(TEXT)
  profileId String      @db.ObjectId
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  serverId  String      @db.ObjectId
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  messages  Message[]

  @@index([profileId])
  @@index([serverId])
}

// message modal for channels
model Message {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  content  String  @db.String
  iamgeUrl String? @db.String

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String  @db.ObjectId
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted   Boolean  @default(false) // for soft deleting.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

// message modal for direct conversation.
model Conversation {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  memberOneId String @db.ObjectId
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId    String          @db.ObjectId
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String  @db.String
  fileUrl String? @db.String

  memberId String @db.ObjectId
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}

// everytime we modify the schema.prisma file, we need to do this, 
// 1. npx prisma generate 
// 2. npx prisma db push
